

05/06/2023

check vi's .gitignore -- did not have virtualenv or the database
(using a copy from cts285_sandbox but need to sync it -- get the schema)

rerunning the schema.sql step by step, recreated empty db.
next, add recipes.


now working out of cts285_sandbox/flasktutorial/TastyTable (officialy forked from vi's code)
removed /instance from .gitignore -- I get why it's done that way but I want it backed up.

--
6pm

/recipe/ doesn't work, and you would expect that since it renders template recipe/index.html which doesnt exist.
it should look like the blog index except that it reflects the recipe table columns (not yet the FK stuff)
127.0.0.1 - - [06/May/2023 18:16:17] "GET /recipe HTTP/1.1" 404 -
well, once you notice that the recipe blueprint was commented out of __init__.py it makes sense.
changed the sql call in recipe/ to match the current schema (minus the FKs other than user)

recipe/ now works. update the template and add a sample recipe to test it (after commit and push)
--

recipe

INSERT INTO recipe (author_id, title, body) VALUES (1, "boil water", "how to boil water");
as recipe id 1

INSERT INTO steps (recipe_id_fk, step_num, description)
VALUES (1, 1, "Heat water until it boils.");

INSERT INTO ingredients (type) VALUES ("water");

INSERT INTO recipe_ingredients(recipe_id_fk, ingredient_id_fk, quantity, measure_type)
VALUES (1, 2, 1, "cup");


# had to recreate recipe_ingredients as table is misspelled
CREATE TABLE "recipe_ingredients" (
	"recipe_id_fk"	INTEGER NOT NULL,
	"ingredient_id_fk"	INTEGER NOT NULL,
	"quantity"	INTEGER NOT NULL,
	"measure_type"	TEXT NOT NULL,
	FOREIGN KEY("recipe_id_fk") REFERENCES "recipe"("id")
);
# or i would but it didnt work... wait on it

INSERT INTO recipe_ingredents(recipe_id_fk, ingredent_id_fk, quantity, measure_type)
VALUES (1, 1, 1, "cup");

9pm 
added /recipe/recipe.html which is rendered by /recipe/view/<int:id>
and it even shows up but as 
<sqlite3.Row object at 0x0000018D81D9BA70>

10pm
hacked it to just use a single string per ingredients, not a bridge table. that will suffice.

however, here's the chatgpt convo that almost worked:
----
Thanks for providing the table schema. To retrieve a list of ingredients in the format "1 cup sugar", you would indeed need to perform a double join between the recipe_ingredients and ingredients tables.

Here's an example query that should do what you're looking for:

SELECT ri.quantity || ' ' || ri.measure_type || ' ' || i.type AS ingredient
FROM recipe_ingredients ri
JOIN ingredients i ON ri.ingredent_id_fk = i.id_pk
JOIN recipe r ON ri.recipe_id_fk = r.id
WHERE r.id = <your_recipe_id>;

(that sql works btw)

In this query, we join the recipe_ingredients table with the ingredients table on the ingredent_id_fk and id_pk columns, respectively. We also join the recipe table on the recipe_id_fk and id columns to ensure we're retrieving ingredients for a specific recipe.

Then, we use the quantity and measure_type columns from the recipe_ingredients table and the type column from the ingredients table to build the desired string format for each ingredient.

Finally, we add a WHERE clause to filter the query results by a specific recipe ID. Replace <your_recipe_id> with the actual ID of the recipe you want to retrieve ingredients for.

or alternately: 
SELECT recipe_ingredents.quantity || ' ' || recipe_ingredents.measure_type || ' ' || ingredients.type AS ingredient
FROM recipe
JOIN recipe_ingredents ON recipe.id = recipe_ingredents.recipe_id_fk
JOIN ingredients ON recipe_ingredents.ingredent_id_fk = ingredients.id_pk
WHERE recipe.id = <your_recipe_id>;

--
5/7
just make recipe_ingredients a plain join to recipe, like steps. 
this is known to work.
making the changes in a new copy of the database: 
/instance/tastytable.sqlite

dropped recipe_ingredents
added recipe_ingredients as follows:
CREATE TABLE recipe_ingredients
(recipe_id_fk INTEGER NOT NULL,
id INTEGER NOT NULL,
name TEXT NOT NULL,
quantity INTEGER NOT NULL,
measure_type TEXT NOT NULL,
FOREIGN KEY (recipe_id_fk) REFERENCES recipe (id)
);
this removes the bridge table and just does it all in here.

-- now inserting data --

INSERT INTO recipe_ingredients (recipe_id_fk, id, name, quantity, measure_type)
VALUES (1, 1, "water", 1, "cup");

SELECT ri.recipe_id_fk, name, quantity, measure_type
    FROM recipe_ingredients ri JOIN recipe r on ri.recipe_id_fk = r.id;
	
this returns 1 row as expected, so let's add the python code:
# (recipe.py, view method)
    ingredients = db.execute(
    """
    SELECT ri.recipe_id_fk, name, quantity, measure_type
    FROM recipe_ingredients ri JOIN recipe r on ri.recipe_id_fk = r.id
    """).fetchall()
# result:
some changes to recipe.py and view.html, and it works as of 1:29pm 5/7.



